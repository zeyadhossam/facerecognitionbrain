{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/signIn/signIn.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/Rank/Rank.js","components/register/register.js","App.js","serviceWorker.js","index.js","components/Logo/brain.png"],"names":["navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","ref","options","max","height","width","alt","src","brain","SignIn","id","htmlFor","type","name","value","ImageLinkForm","onInputChange","onSubmit","onChange","FaceRecognition","box","imageurl","map","item","index","top","toprow","right","rightcol","bottom","bottomrow","left","leftcol","key","Rank","Register","htmlfor","app","Clarifai","App","apiKey","particlesOptions","particles","number","density","enable","value_area","interactivity","events","onhover","mode","event","setState","input","target","calculateFaceLocation","data","i","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","state","imageUrl","models","predict","FACE_DETECT_MODEL","then","response","length","catch","err","console","log","route","wrapper","React","createRef","this","params","Navigation","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.c85d0274.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst navigation = ({onRouteChange,isSignedIn}) => {\r\n \r\n    if(isSignedIn){\r\n      return(\r\n    <nav style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n      <p onClick={()=> onRouteChange('signout')} className=\"f3 link dim black underline pa3 pointer\">sign out</p>\r\n    </nav>\r\n      )}\r\n    else{\r\n      return(\r\n       \r\n      <nav style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n      <p onClick={()=> onRouteChange('signin')} className=\"f3 link dim black underline pa3 pointer\">sign in</p>\r\n      <p onClick={()=> onRouteChange('register')} className=\"f3 link dim black underline pa3 pointer\">register</p>\r\n \r\n    </nav>\r\n  \r\n  \r\n       ) }\r\n    }\r\n    \r\n    \r\n \r\n\r\nexport default navigation;\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport brain from \"./brain.png\";\r\nimport \"./Logo.css\";\r\nconst Logo = (ref) => {\r\n  return (\r\n    <div className=\"ma4 mt0 mb0\">\r\n      <Tilt\r\n        className=\"Tilt br2 shadow-2\"\r\n        options={{ max: 55 }}\r\n        style={{ height: 120, width: 120 }}\r\n      >\r\n        <div className=\"Tilt-inner\">\r\n          <img alt=\"logo\" src={brain}></img>{\" \"}\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n};\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst SignIn = ({ onRouteChange }) => {\r\n  return (\r\n    <article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-2 center\">\r\n      <main className=\"pa4 black-80\">\r\n        <div className=\"measure  \">\r\n          <fieldset id=\"sign_up\" className=\"ba  b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n            <div className=\"mt3 \">\r\n              <label className=\"db fw6 lh-copy  f6\" htmlFor=\"email-address\">\r\n                Email\r\n              </label>\r\n              <input\r\n                className=\"pa2 input-reset ba bg-transparent shadow-3 hover-white w-100\"\r\n                type=\"email\"\r\n                name=\"email-address\"\r\n                id=\"email-address\"\r\n              />\r\n            </div>\r\n            <div className=\"mv3 \">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">\r\n                Password\r\n              </label>\r\n              <input\r\n                className=\"b pa2 input-reset shadow-3 ba bg-transparent  hover-white w-100\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n              />\r\n            </div>\r\n            <div></div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input\r\n              onClick={() => onRouteChange(\"home\")}\r\n              className=\"b ph3 pv2 input-reset ba br2 shadow-5 b--black bg-transparent grow pointer f6 dib\"\r\n              type=\"submit\"\r\n              value=\"Sign in\"\r\n            />\r\n          </div>\r\n          <div className=\"lh-copy mt3\">\r\n            <p\r\n              onClick={() => onRouteChange(\"register\")}\r\n              className=\"f6 hover underline link dim pointer black db\"\r\n            >\r\n              register\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </article>\r\n  );\r\n};\r\nexport default SignIn;\r\n","import React from \"react\";\r\nimport \"./ImageLinkForm.css\";\r\n\r\n\r\nconst ImageLinkForm = ({ onInputChange, onSubmit }) => {\r\n \r\n  return (\r\n    <div>\r\n      <p className=\"f3 mt-8\">\r\n        {\"This magic brail will detect faces. Give it a try \"}\r\n      </p>\r\n      <div className=\" center \">\r\n\r\n        <div className=\" form center pa4 br3 shadow-5 \">\r\n          <input\r\n            className=\" f4 pa2 w-70 center\"\r\n            type=\"text\"\r\n            onChange={onInputChange}\r\n          ></input>\r\n          <button\r\n            className=\"w-20  grow f4 ml2 ph3 pv2 dib  white btn-color\"\r\n            onClick={onSubmit}\r\n          >\r\n            detect\r\n          </button>\r\n\r\n            {/* <button className=\" clear grow\"  >❌</button> */}\r\n\r\n        \r\n        </div>\r\n      \r\n          </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\nimport \"./FaceRecognition.css\";\r\nconst FaceRecognition = ({box,imageurl}) => {\r\n  return (\r\n    <div className=\"center ma\">\r\n        <div className='absolute mt2'>\r\n<img id='inputimage' alt=\"\" src={imageurl} width='500px' height='auto'></img>\r\n   \r\n{    box.map((item, index) => (\r\n                    <div className='bounding-box' style={{top: item.toprow, right: item.rightcol, bottom: item.bottomrow, left: item.leftcol}} key={index}></div>\r\n                ))}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FaceRecognition;","import React from \"react\";\r\n\r\nconst Rank = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"white f3\">{\"andrie , current rank is ...\"}</div>\r\n      <div className=\"white f1\">{\"#5\"}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Rank;\r\n","import React from \"react\";\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n  return (\r\n    <article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-2 center\">\r\n      <main className=\"pa4 black-80\">\r\n        <div className=\"measure \">\r\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n            <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"Name\">\r\n                Name\r\n              </label>\r\n              <input\r\n                className=\"pa2 shadow-3 input-reset ba bg-transparent  hover-white w-100\"\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n              />\r\n            </div>\r\n            <div className=\"mt3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">\r\n                Email\r\n              </label>\r\n              <input\r\n                className=\"pa2 shadow-3 input-reset ba bg-transparent  hover-white w-100\"\r\n                type=\"email\"\r\n                name=\"email-address\"\r\n                id=\"email-address\"\r\n              />\r\n            </div>\r\n            <div className=\"mv3\">\r\n              <label className=\"db fw6 lh-copy f6\" htmlfor=\"password\">\r\n                Password\r\n              </label>\r\n              <input\r\n                className=\"b pa2 shadow-3 input-reset ba bg-transparent  hover-white w-100\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n              />\r\n            </div>\r\n          </fieldset>\r\n          <div className=\"\">\r\n            <input\r\n              onClick={() => onRouteChange(\"signin\")}\r\n              className=\"b ph3 pv2 input-reset br2 ba b--black bg-transparent grow pointer f6 dib \"\r\n              type=\"submit\"\r\n              value=\"register\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </article>\r\n  );\r\n};\r\nexport default Register;\r\n","import React, { Component } from \"react\";\r\nimport Clarifai from \"clarifai\";\r\nimport Navigation from \"./components/Navigation/Navigation\";\r\nimport Logo from \"./components/Logo/Logo\";\r\nimport SignIn from \"./components/signIn/signIn\";\r\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\r\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\r\nimport Rank from \"./components/Rank/Rank\";\r\nimport Register from \"./components/register/register\";\r\nimport Particles from \"react-particles-js\";\r\nimport \"./App.css\";\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: \"c098602913f543f08885ef7ccb7ea613\",\r\n});\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 30,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800,\r\n      },\r\n    },\r\n  },\r\n  interactivity: {\r\n    events: {\r\n      onhover: {\r\n        enable: true,\r\n        mode: \"repulse\",\r\n      },\r\n    },\r\n  },\r\n};\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.wrapper = React.createRef();\r\n    this.state = {\r\n      input: \"\",\r\n      imageUrl: \"\",\r\n      box: [],\r\n      route: \"signin\",\r\n      isSignedIn: false,\r\n    };\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ input: event.target.value });\r\n  };\r\n\r\n  calculateFaceLocation = (data, i) => {\r\n    let clarifaiFace = data.outputs[0].data.regions[i].region_info.bounding_box;\r\n    let image = document.getElementById(\"inputimage\");\r\n    let width = Number(image.width);\r\n    let height = Number(image.height);\r\n    return {\r\n      leftcol: clarifaiFace.left_col * width,\r\n      toprow: clarifaiFace.top_row * height,\r\n      rightcol: width - clarifaiFace.right_col * width,\r\n      bottomrow: height - clarifaiFace.bottom_row * height,\r\n    };\r\n  };\r\n\r\n  displayFaceBox = (box) => {\r\n    this.setState({\r\n      box: [...this.state.box, box],\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    this.setState({ box: [], imageUrl: this.state.input });\r\n    app.models\r\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\r\n      .then((response) => {\r\n        for (let i = 0; i < response.outputs[0].data.regions.length; i++) {\r\n          this.displayFaceBox(this.calculateFaceLocation(response, i));\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === \"signout\") {\r\n      this.setState({ isSignedIn: false });\r\n    } else if (route === \"home\") {\r\n      this.setState({ isSignedIn: true });\r\n    }\r\n    this.setState({ route: route });\r\n  };\r\n\r\n  render() {\r\n    const { isSignedIn, imageUrl, route, box } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles className=\"particles\" params={particlesOptions} />\r\n\r\n        <Navigation\r\n          isSignedIn={isSignedIn}\r\n          onRouteChange={this.onRouteChange}\r\n        />\r\n        {route === \"home\" ? (\r\n          <div>\r\n            <Logo />\r\n\r\n            <Rank />\r\n            <ImageLinkForm\r\n              onInputChange={this.onInputChange}\r\n              onSubmit={this.onSubmit}\r\n            />\r\n            <FaceRecognition box={box} imageurl={imageUrl} />\r\n          </div>\r\n        ) : route === \"register\" ? (\r\n          <Register onRouteChange={this.onRouteChange} />\r\n        ) : (\r\n          <SignIn onRouteChange={this.onRouteChange} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n// calculateFaceLocation = (data)=>{\r\n//   const clarifaiFace =  data.outputs[0].data.regions[0].region_info.bounding_box;\r\n//   const image = document.getElementById('inputimage');\r\n//   const width = Number(image.width);\r\n//   const height = Number(image.height);\r\n//   return{\r\n//     leftCol: clarifaiFace.left_col * width,\r\n//     topRow: clarifaiFace.top_row * height,\r\n//     rightCol:width-(clarifaiFace.right_col * width),\r\n//     bottomRow:height -(clarifaiFace.bottom_row*height)\r\n//   }\r\n// }\r\n// calculateFaceLocation = (data) => {\r\n//   const image = document.getElementById('inputimage');\r\n//   const width = Number(image.width);\r\n//   const height = Number(image.height);\r\n// return data.outputs[0].data.regions.map(face => {\r\n//     const clarifaiFace = face.region_info.bounding_box;\r\n//     return {\r\n//       leftCol: clarifaiFace.left_col * width,\r\n//       topRow: clarifaiFace.top_row * height,\r\n//       rightCol: width - (clarifaiFace.right_col * width),\r\n//       bottomRow: height - (clarifaiFace.bottom_row * height)\r\n//     }\r\n//   });\r\n// }\r\n// displayFacebox = (box) =>{\r\n\r\n//   this.setState({\r\n//     box: [...this.state.box, box]\r\n//   });\r\n// }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"tachyons\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/brain.f218e86f.png\";"],"sourceRoot":""}